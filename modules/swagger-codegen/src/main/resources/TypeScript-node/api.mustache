// ======================================================================
// This file is autogenerated - Please do not edit
// ======================================================================

/* tslint:disable:no-unused-variable */

import request from "request-promise";
import { ApiResult } from "./../apis";

{{#operations}}{{#operation}}
export class {{classname}} {
    private basePath = process.env.GATEWAY_PRIVATE + "/v4/";
    private defaultHeaders: any = {};

    /**
     {{#summary}}* {{summary}}{{/summary}}
     {{#allParams}}* @param {{paramName}}{{#description}} {{description}}{{/description}}
     {{/allParams}}*/
    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/allParams}}): Promise<ApiResult<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}any{{/returnType}}>> {
        const path = this.basePath + "{{path}}"{{#pathParams}}
            .replace("{" + "{{baseName}}" + "}", String({{paramName}})){{/pathParams}};
        let queryParameters: any = {};
        let headerParams: any = combine({}, this.defaultHeaders);
        let formParams: any = {};

{{#allParams}}{{#required}}
        // verify required parameter "{{paramName}}" is set
        if (!{{paramName}}) {
            throw new Error("Missing required parameter {{paramName}} when calling {{nickname}}");
        }
{{/required}}{{/allParams}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            queryParameters["{{baseName}}"] = {{paramName}};
        }

{{/queryParams}}
{{#headerParams}}
        headerParams["{{baseName}}"] = {{paramName}};

{{/headerParams}}
        let useFormData = false;

{{#formParams}}
        if ({{paramName}} !== undefined) {
            formParams["{{baseName}}"] = {{paramName}};
        }
{{#isFile}}
        useFormData = true;
{{/isFile}}

{{/formParams}}
        const requestOptions: request.Options = {
{{#bodyParam}}
            body: {{paramName}},
{{/bodyParam}}
            method: "{{httpMethod}}",
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            resolveWithFullResponse: true
        };

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        return new Promise((resolve, reject) => {
            request(requestOptions).then(response => {
                const apiResult: ApiResult<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}any{{/returnType}}> = {
                    body: response.body,
                    status: response.statusCode
                };
                resolve(apiResult);
            });
        });
    }
}{{/operation}}{{/operations}}

/**
* Combines two objects of different types.
*/
function combine<T, U>(first: T, second: U): T & U {
    for (let key in second) {
        if (second.hasOwnProperty(key)) {
            (<any>first)[key] = second[key];
        }
    }

    return <T & U>first;
}
