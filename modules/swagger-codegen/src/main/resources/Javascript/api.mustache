//
// DO NOT MODIFY - GENERATED FILE
//

const request = require('request-promise');
const Cookie = require('tough-cookie').Cookie;

class CrunchbaseApi {
  constructor(basePath) {
    // trim trailing slash, if necessary
    if (basePath.substring(basePath.length - 1, basePath.length) == '/') {
      basePath = basePath.substring(0, basePath.length - 1);
    }
    this.basePath = basePath;
    this.session = null;
  }
  {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
  /*
   * {{summary}}
   * {{notes}}
{{#allParams}}   * @param {{=<% %>=}}{<% dataType %>} <%={{ }}=%> {{paramName}} {{description}}
{{/allParams}}   * @return Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>
   */
  {{nickname}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
    {{#allParams}}{{#required}}if ({{paramName}} == null) 
      throw new CrunchbaseApiError("Missing required parameter '{{paramName}}' when calling {{nickname}}");
    {{/required}}{{/allParams}}
    // get fully qualified and encoded path
    let path = this.basePath + replaceAll("{{{path}}}", "\\{format\\}", "json");
    {{#pathParams}}
    path = replaceAll(path, "\\{" + "{{baseName}}" + "\\}", encodeURIComponent({{{paramName}}}.toString()));
    {{/pathParams}}
    // add query string values to path
    const queryParams = {};
    {{#queryParams}}if ({{paramName}} !== undefined) queryParams.{{baseName}} = {{paramName}};
    {{/queryParams}}path += createQueryString(queryParams);

    const headers = {};

    // default headers
    headers["Content-Type"] = "application/json";
    headers["Accept"] = "application/json";
    {{#headerParams}}if ({{paramName}} != null) headers["{{baseName}}"] = {{paramName}};
    {{/headerParams}}
    const options = getRequestOptions(headers, {{#bodyParam}}{{^isBinary}}{{paramName}}{{/isBinary}}{{#isBinary}}null{{/isBinary}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}, "{{httpMethod}}", path);

    // if session exists, add authorization
    if (this.session && this.session.cookies) options.jar = this.session.cookies;

    return new Promise((resolve, reject) => {
      request(options)
      .then(res => {
        if ("{{path}}" === "/cb/sessions") this.updateSession(res, "{{httpMethod}}");
        resolve(res);
        return;
      })
      .catch(err => {
        reject(err);
        return;
      });
    });
  }
  {{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

  /*
   * Routes /cb/sessions response to appropriate handler
   * based on HTTP method.
   */
  updateSession(res, method) {
    switch(method) {
      case "POST":
        this.setSession(res);
        break;
      case "DELETE":
        this.clearSession();
        break;
      default:
        return;
    }
  }

  /*
   * Sets CrunchbaseApi session from POST /cb/sessions response.
   */
  setSession(res) {
    this.session = {
      cookies: this.getCookies(res),
      user: this.getUser(res)
    };
  }

  /*
   * Sets CrunchbaseApi session from POST /cb/sessions response.
   */
  clearSession() {
    this.session = null;
  }

  /*
   * Gets user from a POST /cb/sessions response.
   */
  getUser(res) {
    if (!(res && res.body && res.body.user))
        throw new CrunchbaseApiError("Could not update session due to malformed response body.");
    return res.body.user;
  }

  /*
   * Gets cookies from a POST /cb/sessions response.
   */
  getCookies(res) {
    if (!(res && res.headers && res.headers['set-cookie']))
      throw new CrunchbaseApiError("Could not update session due to missing set-cookie header.");
    const cookies = res.headers['set-cookie'].map(Cookie.parse);
    const jar = request.jar();
    cookies.forEach(cookie => {
      jar.setCookie(cookie, this.basePath);
    });
    return jar;
  }
}

function replaceAll(haystack, needle, replace) {
  let result = haystack;
  if (needle != null && replace != null) {
    result = haystack.replace(new RegExp(needle, 'g'), replace);
  }
  return result;
}

function createQueryString(queryParams) {
  let queryString ='';
  let i = 0;
  for (let queryParamName in queryParams) {
    if (i == 0) {
      queryString += '?' ;
    } else {
      queryString += '&' ;
    }
    queryString +=  queryParamName + '=' + encodeURIComponent(queryParams[queryParamName]);
    i++;
  }
  return queryString;
}

function getRequestOptions(headers, body, method, path) {
  return {
    // request-promise config
    json: true,
    resolveWithFullResponse: true,
    simple: false,
    // todo: test timeout
    timeout: 10000,
    // the request itself
    uri: path,
    method: method,
    headers: headers,
    body: body
  };
}

class CrunchbaseApiError extends Error {
  constructor(message, status) {
    super(message);
    Error.captureStackTrace(this, this.constructor);
    this.name = this.constructor.name;
  }
}

module.exports = CrunchbaseApi;
