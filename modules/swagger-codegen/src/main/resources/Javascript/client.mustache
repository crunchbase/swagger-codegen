//
// DO NOT MODIFY - GENERATED FILE
//

const request = require('request-promise');
const Cookie = require('tough-cookie').Cookie;
const CONFIG = require("../../../config.json");
const flags = require("yargs").argv;

class Client {
  {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
  /*
   * {{summary}}
   * {{notes}}
{{#allParams}}   * @param {{=<% %>=}}{<% dataType %>} <%={{ }}=%> {{paramName}} {{description}}
{{/allParams}}   * @return Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}>
   */
  static {{nickname}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
    {{#allParams}}{{#required}}if ({{paramName}} == null) 
      throw new ClientError("Missing required parameter '{{paramName}}' when calling {{nickname}}");
    {{/required}}{{/allParams}}
    // Get fully qualified path
    let path = replaceAll("{{{path}}}", "\\{format\\}", "json");
    {{#pathParams}}path = replaceAll(path, "\\{" + "{{baseName}}" + "\\}", encodeURIComponent({{{paramName}}}.toString()));
    {{/pathParams}}
    const queryParams = {};
    {{#queryParams}}
    // Set query parameter "{{baseName}}" to "{{paramName}}"
    if ({{paramName}} !== undefined) queryParams.{{baseName}} = {{paramName}};
    {{/queryParams}}
    // Create query string from params
    path += createQueryString(queryParams);

    const headers = {};
    {{#headerParams}}
    // Set header "{{baseName}}" to "{{paramName}}"
    if ({{paramName}} != null) headers["{{baseName}}"] = {{paramName}};
    {{/headerParams}}
    // Get request-promise module options from params, with defaults
    const options = getRequestOptions(headers, {{#bodyParam}}{{^isBinary}}{{paramName}}{{/isBinary}}{{#isBinary}}null{{/isBinary}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}}, "{{httpMethod}}", path);

    // Set authorization headers
    // if (this.session && this.session.cookies) options.jar = this.session.cookies;

    return this.makeRequest !== undefined ? this.makeRequest(options) : makeRequest(options);
  }
  {{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

}

function makeRequest(options) {
  return new Promise((resolve, reject) => {
    request(options)
    .then(res => {
      resolve(res);
    }, err => {
      reject(`Request failed: ${err}`);
    });
  });
}


function replaceAll(haystack, needle, replace) {
  let result = haystack;
  if (needle != null && replace != null) {
    result = haystack.replace(new RegExp(needle, 'g'), replace);
  }
  return result;
}

function createQueryString(queryParams) {
  let queryString ='';
  let i = 0;
  for (let queryParamName in queryParams) {
    if (i == 0) {
      queryString += '?' ;
    } else {
      queryString += '&' ;
    }
    queryString +=  queryParamName + '=' + encodeURIComponent(queryParams[queryParamName]);
    i++;
  }
  return queryString;
}

function getRequestOptions(headers, body, method, path) {
  // Set default headers
  headers["Content-Type"] = "application/json";
  headers["Accept"] = "application/json";

  return {
    // Config for request-promise module
    json: true,
    resolveWithFullResponse: true,
    simple: false,
    timeout: 10000,
    time: true,
    // Request details
    uri: CONFIG.environments[flags.env].domains.main + path,
    method: method,
    headers: headers,
    body: body
  };
}

class ClientError extends Error {
  constructor(message, status) {
    super(message);
    Error.captureStackTrace(this, this.constructor);
    this.name = this.constructor.name;
  }
}

module.exports = Client;
