//
// DO NOT MODIFY - GENERATED FILE
//

/* tslint:disable:no-unused-variable member-ordering max-line-length no-string-literal no-trailing-whitespace */

import { Injectable, Inject } from '@angular/core';
import { Headers, RequestOptionsArgs, URLSearchParams } from '@angular/http';

import 'rxjs/add/operator/toPromise';

import { {{#imports}}{{import}}{{^-last}},
         {{/-last}}{{/imports}} } from '../api';

import { LogService, Logger } from '../../log/log.module';

import { ErrorModel } from '../api';
import { ApiResult } from '../api-result';
import { ApiError } from '../api-error';
import { ApiHelperService } from '../api-helper.service';

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}
@Injectable()
export class {{classname}} {
  public defaultHeaders: any = {};

  private logger: Logger;

  constructor(private apiHelperService: ApiHelperService,
              private logService: LogService) {
    this.logger = logService.getLogger('{{classname}}');
  }

{{#operation}}
  /**
   * {{summary}}
   * {{notes}}
   {{#allParams}}* @param {{paramName}} {{description}}
   {{/allParams}}*/
  public {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}}): Promise<ApiResult<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}>> {
    const path = '{{basePathWithoutHost}}' +
      '{{path}}'{{#pathParams}}
      .replace('{' + '{{baseName}}' + '}', {{paramName}} + ''){{/pathParams}};

    let search = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders);

{{#allParams}}
{{#required}}
    // verify required parameter '{{paramName}}' is set
    if (!{{paramName}}) {
      throw new Error('Missing required parameter {{paramName}} when calling {{nickname}}');
    }
{{/required}}
{{/allParams}}
{{#queryParams}}
    if ({{paramName}} !== undefined) {
      search.set('{{baseName}}', '' + {{paramName}});
    }

{{/queryParams}}
{{#headerParams}}
    headers.append('{{baseName}}', {{paramName}});
{{/headerParams}}

    let requestOptions: RequestOptionsArgs = {
      method: '{{httpMethod}}',
{{#bodyParam}}      body: {{paramName}},{{/bodyParam}}
      search: search,
      // Don't include headers as they'll override global defaults
      // headers: headers
    };

    this.logger.debug('Executing {{httpMethod}} request to ' + path);
    return this.apiHelperService.createResult<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}>(path, requestOptions);
  }

{{/operation}}
}

{{/operations}}
